using GSMA.MobileConnect.Utils;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace GSMA.MobileConnect.Authentication
{
    /// <summary>
    /// A class that holds a valid response from <see cref="IAuthentication.RequestTokenAsync(string, string, string, string, string)"/>
    /// </summary>
    /// <seealso cref="RequestTokenResponse"/>
    public class RequestTokenResponseData
    {
        /// <summary>
        /// The time the response was received
        /// </summary>
        [JsonProperty("time_received")]
        public DateTime TimeReceived { get; set; }

        /// <summary>
        /// The OAuth 2.0 access token generated by the authorization server
        /// </summary>
        [JsonProperty("access_token")]
        public string AccessToken { get; set; }

        /// <summary>
        /// The type of the access token generated (should be "Bearer")
        /// </summary>
        [JsonProperty("token_type")]
        public string TokenType { get; set; }

        /// <summary>
        /// Additional token used in OIDC to provide the identity token claim
        /// </summary>
        [JsonProperty("id_token")]
        public string IdToken { get; set; }

        /// <summary>
        /// The optional refresh token generated by the authorization server
        /// </summary>
        [JsonProperty("refresh_token")]
        public string RefreshToken { get; set; }

        /// <summary>
        /// The time the response will expire, this is calculated using the time received and expires in values.
        /// </summary>
        public DateTime? Expiry { get; set; }

        private int? _expiresIn;
        /// <summary>
        /// The number of seconds from time recieved to expiry
        /// </summary>
        [JsonProperty("expires_in")]
        public int? ExpiresIn
        {
            get { return _expiresIn; }
            set
            {
                _expiresIn = value;
                CalculateExpiry(TimeReceived, value);
            }
        }

        /// <inheritdoc />
        public RequestTokenResponseData()
        {
            this.TimeReceived = DateTime.UtcNow;
        }

        /// <summary>
        /// Calculate the expires value
        /// </summary>
        private DateTime? CalculateExpiry(DateTime timeReceived, int? expiresIn)
        {
            if (!expiresIn.HasValue)
            {
                return null;
            }

            return timeReceived.AddSeconds(expiresIn.Value);
        }
    }
}
